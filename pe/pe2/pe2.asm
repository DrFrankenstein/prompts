;Even Fibonacci numbers <https://projecteuler.net/problem=2>
;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

;Assemble with Microsoft Macro Assembler (tested with Version 10.00.40219.01 (Visual Studio 2012)) and run on any 32-bit Windows.

.model flat, stdcall
option casemap:none

STD_OUTPUT_HANDLE   equ -11
GetStdHandle        proto stdcall, nStdHandle:dword
WriteFile           proto stdcall, hFile:dword, lpBuffer:ptr byte, nNumberOfBytesToWrite:dword, lpumberOfBytesWritten:ptr dword, lpOverlapped: ptr dword
FORMAT_MESSAGE_ALLOCATE_BUFFER equ 100h
FORMAT_MESSAGE_FROM_STRING equ 400h
FORMAT_MESSAGE_ARGUMENT_ARRAY equ 2000h
FormatMessageA      proto stdcall, dwFlags:dword, lpSource:ptr byte, dwMessageId:dword, dwLanguageId:dword, lpBuffer:ptr byte, nSize:dword, varargs:dword
LocalFree           proto stdcall, hMem:dword

LIMIT               equ 4000000

.const
outputMsg           db 'Result: %1!u!%n', 0

.data?
stdout              dd ?

.code

printf proc, format:ptr byte;,...
local buffer:ptr byte
    invoke  FormatMessageA, \
            FORMAT_MESSAGE_ALLOCATE_BUFFER or FORMAT_MESSAGE_FROM_STRING or FORMAT_MESSAGE_ARGUMENT_ARRAY, \
            format, 0, 0, addr buffer, 0, addr format + 4
    invoke  WriteFile, stdout, buffer, eax, 0, 0
    
    invoke  LocalFree, buffer
    ret
printf endp

main proc
;currentTerm = eax
;lastTerm = ecx
;sum = edx
    invoke  GetStdHandle, STD_OUTPUT_HANDLE
    mov     stdout, eax

    mov     eax, 1
    mov     ecx, 1
    xor     edx, edx    ; sum = 0
    
    .while  eax <= LIMIT
       .if      !(eax & 1)
            add     edx, eax
       .endif
       
       xadd     eax, ecx       ;compute next term: tmp = eax + ecx, eax = ecx, ecx = tmp
    .endw
    
    push    edx
    invoke  printf, offset outputMsg
    add     esp, 4
    
    ret
main endp

end
